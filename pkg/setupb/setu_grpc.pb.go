// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package setupb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SetuServiceClient is the client API for SetuService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SetuServiceClient interface {
	GetInventory(ctx context.Context, in *InventoryReq, opts ...grpc.CallOption) (*InventoryResp, error)
	Fetch(ctx context.Context, in *FetchReq, opts ...grpc.CallOption) (*ErrResp, error)
}

type setuServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSetuServiceClient(cc grpc.ClientConnInterface) SetuServiceClient {
	return &setuServiceClient{cc}
}

func (c *setuServiceClient) GetInventory(ctx context.Context, in *InventoryReq, opts ...grpc.CallOption) (*InventoryResp, error) {
	out := new(InventoryResp)
	err := c.cc.Invoke(ctx, "/setu.SetuService/GetInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *setuServiceClient) Fetch(ctx context.Context, in *FetchReq, opts ...grpc.CallOption) (*ErrResp, error) {
	out := new(ErrResp)
	err := c.cc.Invoke(ctx, "/setu.SetuService/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SetuServiceServer is the server API for SetuService service.
// All implementations must embed UnimplementedSetuServiceServer
// for forward compatibility
type SetuServiceServer interface {
	GetInventory(context.Context, *InventoryReq) (*InventoryResp, error)
	Fetch(context.Context, *FetchReq) (*ErrResp, error)
	mustEmbedUnimplementedSetuServiceServer()
}

// UnimplementedSetuServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSetuServiceServer struct {
}

func (UnimplementedSetuServiceServer) GetInventory(context.Context, *InventoryReq) (*InventoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventory not implemented")
}
func (UnimplementedSetuServiceServer) Fetch(context.Context, *FetchReq) (*ErrResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedSetuServiceServer) mustEmbedUnimplementedSetuServiceServer() {}

// UnsafeSetuServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SetuServiceServer will
// result in compilation errors.
type UnsafeSetuServiceServer interface {
	mustEmbedUnimplementedSetuServiceServer()
}

func RegisterSetuServiceServer(s grpc.ServiceRegistrar, srv SetuServiceServer) {
	s.RegisterService(&SetuService_ServiceDesc, srv)
}

func _SetuService_GetInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InventoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SetuServiceServer).GetInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/setu.SetuService/GetInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SetuServiceServer).GetInventory(ctx, req.(*InventoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SetuService_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SetuServiceServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/setu.SetuService/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SetuServiceServer).Fetch(ctx, req.(*FetchReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SetuService_ServiceDesc is the grpc.ServiceDesc for SetuService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SetuService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "setu.SetuService",
	HandlerType: (*SetuServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInventory",
			Handler:    _SetuService_GetInventory_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _SetuService_Fetch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/setupb/setu.proto",
}
